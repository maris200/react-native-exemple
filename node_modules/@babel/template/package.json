{
  "_args": [
    [
      {
        "raw": "@babel/template@7.0.0-beta.47",
        "scope": "@babel",
        "escapedName": "@babel%2ftemplate",
        "name": "@babel/template",
        "rawSpec": "7.0.0-beta.47",
        "spec": "7.0.0-beta.47",
        "type": "version"
      },
      "/Users/duh/Desktop/marverl/node_modules/metro"
    ]
  ],
  "_from": "@babel/template@7.0.0-beta.47",
  "_hasShrinkwrap": false,
  "_id": "@babel/template@7.0.0-beta.47",
  "_location": "/@babel/template",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/template_7.0.0-beta.47_1526343011762_0.3708117451654258"
  },
  "_npmUser": {
    "name": "hzoo",
    "email": "hi@henryzoo.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@babel/template@7.0.0-beta.47",
    "scope": "@babel",
    "escapedName": "@babel%2ftemplate",
    "name": "@babel/template",
    "rawSpec": "7.0.0-beta.47",
    "spec": "7.0.0-beta.47",
    "type": "version"
  },
  "_requiredBy": [
    "/@babel/core",
    "/@babel/helper-function-name",
    "/@babel/helper-module-transforms",
    "/@babel/helper-remap-async-to-generator",
    "/@babel/helper-simple-access",
    "/@babel/helper-wrap-function",
    "/@babel/helpers",
    "/babel-preset-react-native",
    "/metro"
  ],
  "_resolved": "https://registry.npmjs.org/@babel/template/-/template-7.0.0-beta.47.tgz",
  "_shasum": "0473970a7c0bee7a1a18c1ca999d3ba5e5bad83d",
  "_shrinkwrap": null,
  "_spec": "@babel/template@7.0.0-beta.47",
  "_where": "/Users/duh/Desktop/marverl/node_modules/metro",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "dependencies": {
    "@babel/code-frame": "7.0.0-beta.47",
    "@babel/types": "7.0.0-beta.47",
    "babylon": "7.0.0-beta.47",
    "lodash": "^4.17.5"
  },
  "description": "Generate an AST from a string template.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-mAzrOCLwOb4jAobHi0kTwIkoamP1Do28c6zxvrDXjYSJFZHz6KGuzMaT0AV7ZCq7M3si7QypVVMVX2bE6IsuOg==",
    "shasum": "0473970a7c0bee7a1a18c1ca999d3ba5e5bad83d",
    "tarball": "https://registry.npmjs.org/@babel/template/-/template-7.0.0-beta.47.tgz",
    "fileCount": 10,
    "unpackedSize": 24778,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+iVkCRA9TVsSAnZWagAAA58P/jU5M9DB04JmNIToMvon\nN37kZBFrjqHe2AEVdCfoN/FwNVQqSHJPkMTAAMqg6Z9ePIOUjPSyn+LsDLXM\nkajjSNLQ9E0VQMJP2Xp8vughsQRcAVlkuZMfwiptTQnwxihXXNcqvUQ2XIMw\nsvpH7OX/XEsny/n8buvqbbsEcBGOl80LAiW0AIU2UjnV6E7tA2N4MkWZEKAT\nYlE/63DtKXzLeIsvFIPqucRo+10vFFMiaZ/O0MVgfybeNUtOagdwA6dsytoI\ncwObI7px9auJx9HQH5pAuBP8AIl1QIeBFif78EjJbAyqc910gOC/RUeT7Wpm\nWyffwWVYEBNX2/U2XVtdy8c4gidjGu2+7c7QPz3YuDqWpVNaZJ+8LdKi7wra\neesPKkNFWMOrKobxLi/dGlziBVhWshrhvuAhQfVxom36hxLbV6qQ6pMx6N5d\n8TUYljl2ivD8JnYZ2V2wq8RjbHt0IqDje4G6FEit8XX4zigocCDIB3CCNqOB\n2XCoupLC3VqC37uLgskfZi8yAy3wgjIHOEePAGeBKrmBlOeHYt2BDH7yL9k0\nlS6e3rFZZWKvzcOdHF+YkdDpBc61pBQuFjuMwMw1mrO+vY+WMduP1JRenY2c\no+WWyjcHFBNyRkyNwvYczQ1r8ObGBL7ZP5s4zmvz9mk2L3bTNoev0pEUPznD\nA83R\r\n=SSyF\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://babeljs.io/",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    },
    {
      "name": "existentialism",
      "email": "bng412@gmail.com"
    },
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    },
    {
      "name": "xtuc",
      "email": "contact@xtuc.fr"
    }
  ],
  "name": "@babel/template",
  "optionalDependencies": {},
  "readme": "# @babel/template\n\n> Generate an AST from a string template or template literal.\n\nIn computer science, this is known as an implementation of quasiquotes.\n\n## Install\n\n```sh\nnpm install --save-dev @babel/template\n```\n\n## String Usage\n\n```js\nimport template from \"@babel/template\";\nimport generate from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier(\"myModule\"),\n  SOURCE: t.stringLiteral(\"my-module\")\n});\n\nconsole.log(generate(ast).code);\n```\n\n```js\nconst myModule = require(\"my-module\");\n```\n\n### `.ast`\n\nIf no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the `.ast` version of the template.\n\n```js\nconst ast = template.ast(`\n  var myModule = require(\"my-module\");\n`);\n```\nwhich will parse and return the AST directly.\n\n\n## Template Literal Usage\n\n```js\nimport template from \"@babel/template\";\nimport generate from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst fn = template`\n  var IMPORT_NAME = require('${\"my-module\"}');\n`);\n\nconst ast = fn({\n  IMPORT_NAME: t.identifier(\"myModule\");\n});\n\nconsole.log(generate(ast).code);\n```\n\nNote that placeholders can be passed directly as part of the template literal\nin order to make things as readable as possible, or they can be passed into\nthe template function.\n\n### `.ast`\n\nIf no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the `.ast` version of the template.\n\n```js\nconst name = \"my-module\";\nconst mod = \"myModule\";\n\nconst ast = template.ast`\n  var ${mod} = require(\"${name}\");\n`;\n```\nwhich will parse and return the AST directly. Note that unlike the string-based\nversion mentioned earlier, since this is a template literal, it is still\nvalid to perform replacements using template literal replacements.\n\n\n## AST results\n\nThe `@babel/template` API exposes a few flexible APIs to make it as easy as\npossible to create ASTs with an expected structure. Each of these also has\nthe `.ast` property mentioned above.\n\n### `template`\n\n`template` returns either a single statement, or an array of\nstatements, depending on the parsed result.\n\n### `template.smart`\n\nThis is the same as the default `template` API, returning either a single\nnode, or an array of nodes, depending on the parsed result.\n\n### `template.statement`\n\n`template.statement(\"foo;\")()` returns a single statement node, and throw\nan exception if the result is anything but a single statement.\n\n### `template.statements`\n\n`template.statements(\"foo;foo;\")()` returns an array of statement nodes.\n\n### `template.expression`\n\n`template.expression(\"foo\")()` returns the expression node.\n\n### `template.program`\n\n`template.program(\"foo;\")()` returns the `Program` node for the template.\n\n\n## API\n\n### `template(code, [opts])`\n\n#### code\n\nType: `string`\n\n#### options\n\n`@babel/template` accepts all of the options from [babylon](https://github.com/babel/babel/tree/master/packages/babylon), and specifies\nsome defaults of its own:\n\n* `allowReturnOutsideFunction` is set to `true` by default.\n* `allowSuperOutsideMethod` is set to `true` by default.\n* `sourceType` is set to `module` by default.\n\n##### placeholderWhitelist\n\nType: `Set<string>`\nDefault: `undefined`\n\nA set of placeholder names to automatically accept. Items in this list do\nnot need to match the given placeholder pattern.\n\n##### placeholderPattern\n\nType: `RegExp | false`\nDefault: `/^[_$A-Z0-9]+$/`\n\nA pattern to search for when looking for Identifier and StringLiteral\nnodes that should be considered placeholders.\n'false' will disable placeholder searching entirely, leaving only the\n'placeholderWhitelist' value to find placeholders.\n\n##### preserveComments\n\nType: `boolean`\nDefault: `false`\n\nSet this to `true` to preserve any comments from the `code` parameter.\n\n#### Return value\n\nBy default `@babel/template` returns a `function` which is invoked with an\noptional object of replacements. See the usage section for an example.\n\nWhen using `.ast`, the AST will be returned directly.\n\n[babylon]: https://github.com/babel/babylon#options\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel/tree/master/packages/babel-template"
  },
  "version": "7.0.0-beta.47"
}
